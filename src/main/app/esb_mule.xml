<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
xmlns:spring="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

   	<mulexml:namespace-manager includeConfigNamespaces="true">
     <mulexml:namespace prefix="sup" uri="http://support.cxf.module.mule.org/"/>
     <mulexml:namespace prefix="soapenv" uri="http://schemas.xmlsoap.org/soap/envelope/"/>
     <mulexml:namespace prefix="S" uri="http://www.w3.org/2003/05/soap-envelope"/>
  	 <mulexml:namespace prefix="wsa" uri="http://schemas.xmlsoap.org/ws/2004/08/addressing"/>
   	</mulexml:namespace-manager>
   
   	<configuration doc:name="Configuration">
    	<expression-language autoResolveVariables="true">
     		<global-functions>
             	def convertToString(data){
                	return data.toString();
             	}
        	 </global-functions>
     	</expression-language>
 	</configuration>

    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <cxf:configuration name="CXF_Configuration" enableMuleSoapHeaders="true" initializeStaticBusInstance="true" doc:name="CXF Configuration"/>
    <ws:consumer-config name="ConsumerSayHello" service="KarmaService" port="KarmaPort" serviceAddress="http://localhost:8080/TestingWS/Karma" wsdlLocation="http://localhost:8080/TestingWS/Karma?wsdl" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="WebServicePDP" service="EntitlementService" port="EntitlementServiceHttpsSoap12Endpoint"
    					serviceAddress="https://localhost:9443/services/EntitlementService.EntitlementServiceHttpsSoap12Endpoint/"
    					wsdlLocation="https://localhost:9443/services/EntitlementService?wsdl" doc:name="Web Service Consumer"
    					connectorConfig="HTTP_Request_Configuration">
    </ws:consumer-config>
    <http:request-config name="HTTP_Request_Configuration" doc:name="HTTP Request Configuration" host="localhost" port="9443" protocol="HTTPS">
        <http:basic-authentication username="admin" password="admin" preemptive="true"/>
        <tls:context>
            <tls:trust-store path="${path_pdp}/wso2is-5.2.0/repository/resources/security/client-truststore.jks" password="wso2carbon"/>
            <tls:key-store path="${path_pdp}/wso2is-5.2.0/repository/resources/security/wso2carbon.jks" password="wso2carbon" keyPassword="wso2carbon"/>
        </tls:context>
    </http:request-config>
    <ws:consumer-config name="Web_Service_Consumer" service="EntitlementService" port="EntitlementServiceHttpsSoap11Endpoint" serviceAddress="https://localhost:9443/services/EntitlementService.EntitlementServiceHttpsSoap11Endpoint/" wsdlLocation="https://localhost:9443/services/EntitlementService?wsdl" doc:name="Web Service Consumer" connectorConfig="HTTP_Request_Configuration"/>

    <context:property-placeholder location="config.properties" order="1" ignore-unresolvable="true" />
    <context:property-placeholder location="other.properties" order="2" ignore-unresolvable="true" />

    <flow name="main_f" >
        <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/>
        <cxf:proxy-service configuration-ref="CXF_Configuration" payload="envelope" doc:name="CXF"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <flow-ref name="get_input_params_sf" doc:name="get_input_params_sf"/>
        <flow-ref name="fetch_read_apply_sf" doc:name="fetch_read_apply_sf"/>
        <choice doc:name="Check PDP decision">
            <when expression="#[flowVars.applyObligations.Result.Decision == 'Deny']">
                <dw:transform-message doc:name="Deny Service">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	response: {
		info: "Deny Service"
	}
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <when expression="#[message.inboundProperties['http.status'] == 200]">
                <flow-ref name="not_deny_flow" doc:name="not_deny_flow"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	response: "Problems with PDP"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
        <logger message="FINISH!!!!!" level="INFO" doc:name="FINISH"/>
    </flow>
    <sub-flow name="not_deny_flow">
        <flow-ref name="communicate_with_organization_sf" doc:name="communicate_with_organization_sf"/>
        <choice doc:name="Check response status">
            <when expression="#[message.inboundProperties['http.status'] != 200]">
                <json:json-to-xml-transformer doc:name="JSON to XML"/>
            </when>
            <otherwise>
                <flow-ref name="prepare_to_rf_sf" doc:name="prepare_to_rf_sf"/>
                <logger message="Call fetch_read_apply_sf" level="INFO" doc:name="Call fetch_read_apply_sf"/>
                <choice doc:name="Check PDP decision">
                    <when expression="#[flowVars.applyObligations.Result.Decision == 'Deny']">
                        <dw:transform-message doc:name="Deny Service">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	response: {
		info: "Deny Service"
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <logger message="Prepare output for endpoint" level="INFO" doc:name="Prepare output to initial endpoint"/>
                        <json:json-to-xml-transformer doc:name="JSON to XML"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="error_f">
        <logger message="Error flow!!  #[message.inboundProperties['http.status']]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Error flow">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	response: payload
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
</mule>
